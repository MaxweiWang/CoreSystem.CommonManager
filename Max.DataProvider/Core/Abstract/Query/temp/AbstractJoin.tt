<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	if(1==2){
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Max.DataProvider.Core.Abstract.Query1
{
    //
    using System.Linq.Expressions;
    using Max.DataProvider.BaseClass;
    using Max.DataProvider.Core.Interface.Query;

	   //
	<#
	var Str="T1,";
    for (int i = 2; i < 17; i++)
    {
		Str+="T"+i+",";
		var NewStr=Str.Substring(0,Str.Length-1);
	#>
	public abstract class AbstractJoin<<#=NewStr#>> : AbstractBase, IJoin<<#=NewStr#>>
    {

	<#if(i<16){#> 	public abstract IJoin<<#=NewStr#>, TJoin> Join<TJoin>(Expression<Func<HzyTuple<<#=NewStr#>, TJoin>, bool>> ON, EJoinType _EJoinType = EJoinType.LEFT_JOIN);<#}#>


		public abstract IMappingData<TReturn> Select<TReturn>(Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> Select);

		public abstract IMappingData<TReturn> Select<TReturn>(string Select="*");

		public abstract IJoin<<#=NewStr#>> Where(Expression<Func<HzyTuple<<#=NewStr#>>, bool>> Where);

		public abstract IJoin<<#=NewStr#>> WhereIF(bool IF, Expression<Func<HzyTuple<<#=NewStr#>>, bool>> Where);

		public abstract IJoin<<#=NewStr#>> OrderBy<TReturn>(Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> OrderBy);

		public abstract IJoin<<#=NewStr#>> OrderByIF<TReturn>(bool IF, Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> OrderBy);

		public abstract IJoin<<#=NewStr#>> OrderByDesc<TReturn>(Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> OrderBy);

		public abstract IJoin<<#=NewStr#>> OrderByDescIF<TReturn>(bool IF, Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> OrderBy);

		public abstract IJoin<<#=NewStr#>> Having(Expression<Func<HzyTuple<<#=NewStr#>>, bool>> Where);

		public abstract IJoin<<#=NewStr#>> GroupBy<TReturn>(Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> GroupBy);

		public abstract IJoin<<#=NewStr#>> SqlString(Action<SQL> _Action);
    }
	<#}#>

    

}

<#}#>