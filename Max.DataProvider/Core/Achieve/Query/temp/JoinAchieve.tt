<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	if(1==2){
#>


using System;
namespace Max.DataProvider.Core.Achieve.Query1
{
    using Max.DataProvider.BaseClass;
    using Max.DataProvider.Core.Abstract;
    using Max.DataProvider.Core.Abstract.Query;
    using Max.DataProvider.Core.Achieve.Query;
    using Max.DataProvider.Core.CodeAnalysis;
    using Max.DataProvider.Core.Interface.Query;
    using System.Linq.Expressions;

<#
	var Str="T1,";
    for (int i = 2; i < 17; i++)
    {
		Str+="T"+i+",";
		var NewStr=Str.Substring(0,Str.Length-1);
	#>

    public class JoinAchieve<<#=NewStr#>> : AbstractJoin<<#=NewStr#>>
    {
        public JoinAchieve(SQL _Sql, AbstractAdo _Ado, Analysis _Analysis)
        {
            this.SqlCode = _Sql;
            this.Ado = _Ado;
            this.analysis = _Analysis;
        }

        public override IJoin<<#=NewStr#>> GroupBy<TReturn>(Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> GroupBy)
        {
            this.analysis.CreateGroupBy(GroupBy, this.SqlCode);
            return this;
        }

        public override IJoin<<#=NewStr#>> Having(Expression<Func<HzyTuple<<#=NewStr#>>, bool>> Where)
        {
			this.analysis.CreateHaving(Where, this.SqlCode); return this;            
        }

     <#if(i<16){#>   
	 public override IJoin<<#=NewStr#>, TJoin> Join<TJoin>(Expression<Func<HzyTuple<<#=NewStr#>, TJoin>, bool>> ON, EJoinType _EJoinType = EJoinType.LEFT_JOIN)
        {
            if (ON == null) throw new DbFrameException(" Join 连接对象不能为 NULL ！");
            this.analysis.CreateJoin(ON, this.SqlCode, _EJoinType);
            return new JoinAchieve<<#=NewStr#>, TJoin>(this.SqlCode, this.Ado, this.analysis);
        }<#}#>

        public override IJoin<<#=NewStr#>> OrderBy<TReturn>(Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> OrderBy)
        {
            this.analysis.CreateOrderBy(OrderBy, this.SqlCode);
            return this;
        }

		public override IJoin<<#=NewStr#>> OrderByIF<TReturn>(bool IF, Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> OrderBy)
        {
			if(IF) return this.OrderBy(OrderBy);
            return this;
        }

        public override IJoin<<#=NewStr#>> OrderByDesc<TReturn>(Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> OrderBy)
        {
            this.analysis.CreateOrderByDESC(OrderBy, this.SqlCode);
            return this;
        }

		public override IJoin<<#=NewStr#>> OrderByDescIF<TReturn>(bool IF, Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> OrderBy)
        {
            if(IF) return this.OrderByDesc(OrderBy);
            return this;
        }

        public override IMappingData<TReturn> Select<TReturn>(Expression<Func<HzyTuple<<#=NewStr#>>, TReturn>> Select)
        {
            //解析 列
            this.analysis.CreateSelect(Select, this.SqlCode);
            return new MappingDataAchieve<TReturn>(this.SqlCode, this.Ado, this.analysis);
        }

        public override IMappingData<TReturn> Select<TReturn>(string Select="*")
        {
            this.SqlCode.Code_Column.Clear().Append(Select);
            return new MappingDataAchieve<TReturn>(this.SqlCode, this.Ado, this.analysis);
        }

        public override IJoin<<#=NewStr#>> SqlString(Action<SQL> _Action)
        {
            _Action?.Invoke(this.SqlCode);
            return this;
        }

        public override IJoin<<#=NewStr#>> Where(Expression<Func<HzyTuple<<#=NewStr#>>, bool>> Where)
        {
            this.SqlCode.Code_Where.Append(" AND ");
            this.analysis.CreateWhere(Where, this.SqlCode);
            return this;
        }

        public override IJoin<<#=NewStr#>> WhereIF(bool IsWhere, Expression<Func<HzyTuple<<#=NewStr#>>, bool>> Where)
        {
            if (IsWhere) return this.Where(Where);
            return this;
        }
    }
	<#}#>
    

}

<#}#>